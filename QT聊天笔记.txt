
Dialog
QToolBox中有page
page中的布局，要先放入QWidget，就能选中toolBox，布局后，再删除QWidget。

添加dialoglist父类是QWidget

//设置标题
setWindowTitle("MySelfQQ 2019");
//设置图标
setWindowIcon(QPixmap(":/images/qq.png"));


//设置头像
QToolButton *btn = new QToolButton();
//设置文字
btn->setText("斧头帮");
//设置头像
btn->setIcon(QPixmap(":/image/...."));
//设置头像大小
btn->setIconSize(QPixmap(":/image/....").size());
//设置按钮风格 透明
btn->setAutoRaise(true);
//设置文字和图片一起
btn->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);
//加到 垂直布局中
ui->vLayout->addWidget(btn);


///////////////////////////////////
QList<QString> nameList;//用户名
nameList << "" << "";

QStringList iconNameList;//用户图标
iconNameList << "" << "";

QVector<QToolButton *> vToolBtn;//用户按钮全部保存

//准备图标
for(int i = 0; i < 9; ++i){
    //设置头像
    QToolButton *btn = new QToolButton();
    //设置文字
    btn->setText("斧头帮");
    //设置头像
    btn->setIcon(QPixmap(":/image/...."));
    //设置头像大小
    btn->setIconSize(QPixmap(":/image/....").size());
    //设置按钮风格 透明
    btn->setAutoRaise(true);
    //设置文字和图片一起
    btn->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);
    //加到 垂直布局中
    ui->vLayout->addWidget(btn);
}

聊天窗口效果图

QFrame右边框属性 frameShape改成box就有边框了
QWidget没有边框属性

ComboBox currentIndex改变默认值

UDP通信
QT += network
#include <QUdpSocket>

//创建套接字
QUdpSocket *udp;
udp = new QUdpSocket(this);
//绑定自身端口号
udp->bind();
//点击发送按钮，发送报文
connect(ui->sendBtn, &QPushButton::clicked, [=](){
    //书写内容 对方ip 对方端口
    udp->writeDatagram();
    ui->record->append("my Say"+ui->input->toPlainText());
    //清空
    ui->input->clear();
});
//接受数据
connect(udp, &QUdpSocket::readyRead, [=](){
    //获取报文大小
    qint64 size = udp->pendingDatagramSize();
    QByteArray array QByteArray(size, 0);
    //读取数据
    udp->readDatagram(array.data(), size);
    //将数据同步到聊天记录中
    ui->record->append();
});

实现基本的聊天功能
    声明聊天的方法
public:
    void sndMsg(MsgType type);//广播UDP消息
    void usrEnter(QString username);//处理新用户加入
    void usrLeft(QString username, QString time);//处理用户离开
    QString getUsr();//获取用户名
    QString getMsg();//获取聊天信息
private:
    QUdpSocket *udpSocket;//udp套接字
    qint64 port;//端口
    QString uName;//用户名

    void receiveMessage();//接受UDP消息

//消息类型
enum MsgType{Msg, UsrEnter, UsrLeft};

//初始化操作
udp = new QUdpSocket(this);
//用户名获取
this->name = name;
//端口号
this->port = 9999;
//绑定模式
//采用ShareAddress模式（级允许其他的服务连接到相同的地址和端口，特别是
//用在多客户端监听同一个服务器端口等时特别有效），和ReuseAddressHint模式
//（重新连接服务器）
upd->bind(port,QUdpSocket::ShareAddress|QUdpSocket::ReuseAddressHint);
//发送新用户进入
sndMsg(UsrEnter);
//点击发送按钮
connect(ui->btnSend, &QPushButton::clicked, [=](){
    sndMsg(Msg);
});
//监听别人发的数据
connect(udp, &QUdpSocket::readyRead, this, &Widget::recvMsg);

void Widget::sndMsg(MsgType type){
    //发送数据分类3种类型
    //发送数据 做分段处理 第一段 类型 第二段 用户名 第三段 具体内容
    QByteArray array;
    //数据流，对字节数组进行流操作。
    QDataStream stream(&array, QIODevice::WriteOnly);
    stream << type;//第一段内容 添加到流中
    switch(type){
        Msg: //普通消息发送
            if(ui->msgTxtEdit->toPlainText() == ""){//如果用户没有输入内容，不发任何消息
                QMessageBox::waring(this, "", "发送内容不能为空");
                return ;
            }
            //第二段数据，发送的数据
            stream << getMsg() << getUsr();
            break;
        UsrEnter://新用户加入消息
            break;
        UsrLeft://用户离开消息
            break;
    }

    //书写报文 广播发送
    udp->writeDatagram(array, QHostAddress::Broadcast, port);
}
//获取发送的数据
QString Widget::getMsg(){
    QString str = ui->msgTxtEdit->toHtml();
    ui->msgTxtEdit->clear();
    ui->msgTxtEdit->setFocus();//输入框获取焦点
    return str;
}

void Widget::recvMsg(){
    //获取当前时间
    QString time = QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss");

    //拿到数据报文
    //获取长度
    qint64 size = udp->pendingDatagramSize();
    QByteArray array(size, 0);
    udp->readDatagram(array.data(), size);
    //解析数据
    //第一段 类型 第二段 用户名 第三段 具体内容
    QDataStream stream(&array, QIODevice::ReadOnly);
    int msgType;//读取类型
    QString usrName;//用户名获取
    QString msg;
    stream >> msgType;
    switch(msgType){
    case Msg://普通聊天
        stream>>usrName>>msg;
        //追加聊天记录
        ui->msgBrower->setTextColor(Qt::blue);
        ui->msgBrower->append("["+usrName+"]"+time);
        ui->msgBrower->append(msg);
    case UsrEnter://新用户近路
        //更新右侧的TableWidget
        stream >> usrName;
        bool isEmpty = ui->ursTblWidget->fintItems(usrName, Qt::MatchExactly).isEmpty();
        //多加了个这个限定，所以不会死循环
        if(isEmpty){
            QTableWidgetItem *usr = new QTableWidgetItem(usrName);
            //插入行
            ui->usrTblWidget->insertRow(0);
            ui->usrTblWidget->setItem(0,0, usr);
            //追加聊天记录
            ui->msgBrowser->setTextColor(Qt::gray);
            ui->msgBrowser->append(QString("%1 上线了").arg(usrName));
            //在线人数更新
            ui->usrNumLbl->setText(QString("在线用户： %1人").arg(ui->usrTbleWidget->rowCount()));
            //把自身的信息 广播出去
            sndMsg(UsrName);
        }
        break;
    case UsrLeft:
        usrLeft();
        break;
    }
}

void Widget::usrLeft(QString usrname, QString time){
    //更新右侧的TableWidget
    bool isEmpty = ui->usrTbleWidget->findItems(usrName, Qt::MatchExactly).isEmpty();
    if(!isEmpty){
        int row = ui->usrTblWidget->findItems(usrname, Qt::MatchExactly).first()->row();
        ui->usrTblWidget->remove(row);
    }
}

辅助功能





